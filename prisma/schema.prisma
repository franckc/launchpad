// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// Note: PRISMA_ for &pgbouncer=true
// TIPS:
//  1. do not use bouncer when running 'npx prisma db push' - otherwise it hangs.
//  2. npx loads .env so even if you define env var in the shell they will get overriden by .env.
datasource db {
  provider = "postgresql"
  url       = env("POSTGRES_URL_NON_POOLING")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "user")
}

model Agent {
  id            Int         @id @default(autoincrement())
  name          String
  config        Json
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "agent")  
}

enum JobStatusType {
  CREATED
  RUNNING
  WAITING_FOR_FEEDBACK
  DONE
  ERROR
}

model Job {
  id            Int         @id @default(autoincrement())
  agentId       Int         @map(name: "agent_id")
  agent_config  Json
  task_config   Json
  status        JobStatusType
  output        Json?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  @@map(name: "job")  
}