// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

// Franck's notes: PRISMA_ adds the "&pgbouncer=true"
// TIPS:
//  1. do not use bouncer when running 'npx prisma db push' - otherwise it hangs.
//  2. npx loads .env so even if you define env var in the shell they will get overriden by .env.
// Supabase notes
//  - url = Connect to Supabase via connection pooling with Supavisor for the app
//  - directUrl =  Direct connection to the database. Used for migrations.
//
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL_PGBOUNCER")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map(name: "email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String  @map(name: "provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map(name: "account")
}

model Session {
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map(name: "verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map(name: "credential_id")
  userId               String  @map(name: "user_id")
  providerAccountId    String  @map(name: "provider_account_id")
  credentialPublicKey  String  @map(name: "credential_public_key")
  counter              Int
  credentialDeviceType String  @map(name: "credential_device_type")
  credentialBackedUp   Boolean @map(name: "credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map(name: "authenticator")
}

model Agent {
  id        Int      @id @default(autoincrement())
  userId    String   @map(name: "user_id")
  config    Json
  runs      Run[]
  image     Image?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "agent")
}

enum ImageBuildStatusType {
  PENDING
  RUNNING
  DONE
  ERROR
}

model Image {
  id          Int                  @id @default(autoincrement())
  agentId     Int                  @unique @map(name: "agent_id") // Note: 1:1 mapping Agent <> Image
  agent       Agent                @relation(fields: [agentId], references: [id])
  runs        Run[]
  buildStatus ImageBuildStatusType @map(name: "build_status")
  name        String? // Name of the docker image, populated after the build is done.
  createdAt   DateTime             @default(now()) @map(name: "created_at")
  updatedAt   DateTime             @updatedAt @map(name: "updated_at")

  @@map(name: "image")
}

enum RunStatusType {
  PENDING
  RUNNING
  WAITING_FOR_FEEDBACK
  DONE
  ERROR
}

model Run {
  id        Int           @id @default(autoincrement())
  agentId   Int           @map(name: "agent_id")
  imageId   Int           @map(name: "image_id")
  agent     Agent         @relation(fields: [agentId], references: [id])
  image     Image         @relation(fields: [imageId], references: [id])
  config    Json
  status    RunStatusType
  output    Json?
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @updatedAt @map(name: "updated_at")

  @@map(name: "run")
}
